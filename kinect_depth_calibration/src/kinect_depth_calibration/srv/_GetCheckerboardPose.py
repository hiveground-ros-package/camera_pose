"""autogenerated by genpy from kinect_depth_calibration/GetCheckerboardPoseRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetCheckerboardPoseRequest(genpy.Message):
  _md5sum = "f9dc7d7f2c73b6a404e26f1d03ad4ec2"
  _type = "kinect_depth_calibration/GetCheckerboardPoseRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 corners_x
int32 corners_y
float32 spacing_x
float32 spacing_y

"""
  __slots__ = ['corners_x','corners_y','spacing_x','spacing_y']
  _slot_types = ['int32','int32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       corners_x,corners_y,spacing_x,spacing_y

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetCheckerboardPoseRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.corners_x is None:
        self.corners_x = 0
      if self.corners_y is None:
        self.corners_y = 0
      if self.spacing_x is None:
        self.spacing_x = 0.
      if self.spacing_y is None:
        self.spacing_y = 0.
    else:
      self.corners_x = 0
      self.corners_y = 0
      self.spacing_x = 0.
      self.spacing_y = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2i2f.pack(_x.corners_x, _x.corners_y, _x.spacing_x, _x.spacing_y))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.corners_x, _x.corners_y, _x.spacing_x, _x.spacing_y,) = _struct_2i2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2i2f.pack(_x.corners_x, _x.corners_y, _x.spacing_x, _x.spacing_y))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.corners_x, _x.corners_y, _x.spacing_x, _x.spacing_y,) = _struct_2i2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2i2f = struct.Struct("<2i2f")
"""autogenerated by genpy from kinect_depth_calibration/GetCheckerboardPoseResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class GetCheckerboardPoseResponse(genpy.Message):
  _md5sum = "f2e4d5e733b7a98672707e8a53a68cd4"
  _type = "kinect_depth_calibration/GetCheckerboardPoseResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/PoseStamped board_pose
float32 min_x
float32 max_x
float32 min_y
float32 max_y
float32 noise_vel
float32 noise_rot

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['board_pose','min_x','max_x','min_y','max_y','noise_vel','noise_rot']
  _slot_types = ['geometry_msgs/PoseStamped','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       board_pose,min_x,max_x,min_y,max_y,noise_vel,noise_rot

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetCheckerboardPoseResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.board_pose is None:
        self.board_pose = geometry_msgs.msg.PoseStamped()
      if self.min_x is None:
        self.min_x = 0.
      if self.max_x is None:
        self.max_x = 0.
      if self.min_y is None:
        self.min_y = 0.
      if self.max_y is None:
        self.max_y = 0.
      if self.noise_vel is None:
        self.noise_vel = 0.
      if self.noise_rot is None:
        self.noise_rot = 0.
    else:
      self.board_pose = geometry_msgs.msg.PoseStamped()
      self.min_x = 0.
      self.max_x = 0.
      self.min_y = 0.
      self.max_y = 0.
      self.noise_vel = 0.
      self.noise_rot = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.board_pose.header.seq, _x.board_pose.header.stamp.secs, _x.board_pose.header.stamp.nsecs))
      _x = self.board_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d6f.pack(_x.board_pose.pose.position.x, _x.board_pose.pose.position.y, _x.board_pose.pose.position.z, _x.board_pose.pose.orientation.x, _x.board_pose.pose.orientation.y, _x.board_pose.pose.orientation.z, _x.board_pose.pose.orientation.w, _x.min_x, _x.max_x, _x.min_y, _x.max_y, _x.noise_vel, _x.noise_rot))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.board_pose is None:
        self.board_pose = geometry_msgs.msg.PoseStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.board_pose.header.seq, _x.board_pose.header.stamp.secs, _x.board_pose.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.board_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.board_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.board_pose.pose.position.x, _x.board_pose.pose.position.y, _x.board_pose.pose.position.z, _x.board_pose.pose.orientation.x, _x.board_pose.pose.orientation.y, _x.board_pose.pose.orientation.z, _x.board_pose.pose.orientation.w, _x.min_x, _x.max_x, _x.min_y, _x.max_y, _x.noise_vel, _x.noise_rot,) = _struct_7d6f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.board_pose.header.seq, _x.board_pose.header.stamp.secs, _x.board_pose.header.stamp.nsecs))
      _x = self.board_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d6f.pack(_x.board_pose.pose.position.x, _x.board_pose.pose.position.y, _x.board_pose.pose.position.z, _x.board_pose.pose.orientation.x, _x.board_pose.pose.orientation.y, _x.board_pose.pose.orientation.z, _x.board_pose.pose.orientation.w, _x.min_x, _x.max_x, _x.min_y, _x.max_y, _x.noise_vel, _x.noise_rot))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.board_pose is None:
        self.board_pose = geometry_msgs.msg.PoseStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.board_pose.header.seq, _x.board_pose.header.stamp.secs, _x.board_pose.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.board_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.board_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.board_pose.pose.position.x, _x.board_pose.pose.position.y, _x.board_pose.pose.position.z, _x.board_pose.pose.orientation.x, _x.board_pose.pose.orientation.y, _x.board_pose.pose.orientation.z, _x.board_pose.pose.orientation.w, _x.min_x, _x.max_x, _x.min_y, _x.max_y, _x.noise_vel, _x.noise_rot,) = _struct_7d6f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_7d6f = struct.Struct("<7d6f")
class GetCheckerboardPose(object):
  _type          = 'kinect_depth_calibration/GetCheckerboardPose'
  _md5sum = 'f515725e9bae2b07fb95aab5c6865589'
  _request_class  = GetCheckerboardPoseRequest
  _response_class = GetCheckerboardPoseResponse
